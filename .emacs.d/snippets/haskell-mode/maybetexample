# -*- mode: snippet -*-
# key: maybetexample
# name: maybetexample
# contributor: David Johnson
# --
import Control.Monad
import Control.Monad.Trans

newtype MaybeT m a = MaybeT { runMaybeT :: m (Maybe a) }

instance Monad m => Monad (MaybeT m) where
    return = MaybeT . return . Just
    x >>= f = MaybeT $ do maybe_val <- runMaybeT x
                          case maybe_val of
                            Nothing -> return Nothing
                            Just x -> runMaybeT $ f x

instance Monad m => MonadPlus (MaybeT m) where
    mzero = MaybeT $ return Nothing
    mplus x y = MaybeT $ do maybe_val <- runMaybeT x
                            case maybe_val of
                              Nothing -> runMaybeT y
                              Just _ -> return maybe_val

instance MonadTrans MaybeT where
    lift = MaybeT . (liftM Just)

getValidPassword :: MaybeT IO String
getValidPassword = do s <- lift getLine
                      guard (isValid s)
                      return s

askPassword' :: MaybeT IO ()
askPassword' = do lift $ putStrLn "Insert your new password"
                  value <- getValidPassword
                  lift $ putStrLn "Storing in db..."

main :: IO ()
main = do
  runMaybeT askPassword'
  runMaybeT getValidPassword
  putStrLn "done"